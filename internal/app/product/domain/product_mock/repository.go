// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/product/domain/product/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/keziaaurelia1/TakeHomeProjectGovTech/internal/app/product/domain/product"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AllProduct mocks base method.
func (m *MockRepository) AllProduct(ctx context.Context) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProduct", ctx)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProduct indicates an expected call of AllProduct.
func (mr *MockRepositoryMockRecorder) AllProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProduct", reflect.TypeOf((*MockRepository)(nil).AllProduct), ctx)
}

// AllReview mocks base method.
func (m *MockRepository) AllReview(ctx context.Context, productID int64) ([]*product.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllReview", ctx, productID)
	ret0, _ := ret[0].([]*product.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllReview indicates an expected call of AllReview.
func (mr *MockRepositoryMockRecorder) AllReview(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllReview", reflect.TypeOf((*MockRepository)(nil).AllReview), ctx, productID)
}

// FindByDate mocks base method.
func (m *MockRepository) FindByDate(ctx context.Context, tanggal string, reviewID int64) ([]*product.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDate", ctx, tanggal, reviewID)
	ret0, _ := ret[0].([]*product.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDate indicates an expected call of FindByDate.
func (mr *MockRepositoryMockRecorder) FindByDate(ctx, tanggal, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDate", reflect.TypeOf((*MockRepository)(nil).FindByDate), ctx, tanggal, reviewID)
}

// FindByProductID mocks base method.
func (m *MockRepository) FindByProductID(ctx context.Context, productID int64) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProductID", ctx, productID)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProductID indicates an expected call of FindByProductID.
func (mr *MockRepositoryMockRecorder) FindByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProductID", reflect.TypeOf((*MockRepository)(nil).FindByProductID), ctx, productID)
}

// FindByReviewID mocks base method.
func (m *MockRepository) FindByReviewID(ctx context.Context, reviewID int64) (*product.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByReviewID", ctx, reviewID)
	ret0, _ := ret[0].(*product.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByReviewID indicates an expected call of FindByReviewID.
func (mr *MockRepositoryMockRecorder) FindByReviewID(ctx, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByReviewID", reflect.TypeOf((*MockRepository)(nil).FindByReviewID), ctx, reviewID)
}

// FindBySku mocks base method.
func (m *MockRepository) FindBySku(ctx context.Context, sku string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySku", ctx, sku)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySku indicates an expected call of FindBySku.
func (mr *MockRepositoryMockRecorder) FindBySku(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySku", reflect.TypeOf((*MockRepository)(nil).FindBySku), ctx, sku)
}

// FindByTitleCategoryEtalase mocks base method.
func (m *MockRepository) FindByTitleCategoryEtalase(ctx context.Context, search *product.SearchParam) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTitleCategoryEtalase", ctx, search)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTitleCategoryEtalase indicates an expected call of FindByTitleCategoryEtalase.
func (mr *MockRepositoryMockRecorder) FindByTitleCategoryEtalase(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTitleCategoryEtalase", reflect.TypeOf((*MockRepository)(nil).FindByTitleCategoryEtalase), ctx, search)
}

// InsertProduct mocks base method.
func (m *MockRepository) InsertProduct(ctx context.Context, entProduct *product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", ctx, entProduct)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockRepositoryMockRecorder) InsertProduct(ctx, entProduct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockRepository)(nil).InsertProduct), ctx, entProduct)
}

// InsertReview mocks base method.
func (m *MockRepository) InsertReview(ctx context.Context, entReview *product.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReview", ctx, entReview)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertReview indicates an expected call of InsertReview.
func (mr *MockRepositoryMockRecorder) InsertReview(ctx, entReview interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReview", reflect.TypeOf((*MockRepository)(nil).InsertReview), ctx, entReview)
}

// UpdateProduct mocks base method.
func (m *MockRepository) UpdateProduct(ctx context.Context, prevProductID int64, entProduct *product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, prevProductID, entProduct)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockRepositoryMockRecorder) UpdateProduct(ctx, prevProductID, entProduct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockRepository)(nil).UpdateProduct), ctx, prevProductID, entProduct)
}
