// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/product/app/app.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/keziaaurelia1/TakeHomeProjectGovTech/internal/app/product/domain/product"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockApplication) CreateProduct(arg0 context.Context, arg1 *product.ProductParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockApplicationMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockApplication)(nil).CreateProduct), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockApplication) CreateReview(arg0 context.Context, arg1 *product.ReviewParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockApplicationMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockApplication)(nil).CreateReview), arg0, arg1)
}

// FindProductByProductID mocks base method.
func (m *MockApplication) FindProductByProductID(arg0 context.Context, arg1 int64) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductByProductID", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductByProductID indicates an expected call of FindProductByProductID.
func (mr *MockApplicationMockRecorder) FindProductByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByProductID", reflect.TypeOf((*MockApplication)(nil).FindProductByProductID), arg0, arg1)
}

// FindProductBySku mocks base method.
func (m *MockApplication) FindProductBySku(arg0 context.Context, arg1 string) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductBySku", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductBySku indicates an expected call of FindProductBySku.
func (mr *MockApplicationMockRecorder) FindProductBySku(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductBySku", reflect.TypeOf((*MockApplication)(nil).FindProductBySku), arg0, arg1)
}

// FindProductByTitleCategoryEtalase mocks base method.
func (m *MockApplication) FindProductByTitleCategoryEtalase(arg0 context.Context, arg1 *product.SearchParam) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductByTitleCategoryEtalase", arg0, arg1)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductByTitleCategoryEtalase indicates an expected call of FindProductByTitleCategoryEtalase.
func (mr *MockApplicationMockRecorder) FindProductByTitleCategoryEtalase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByTitleCategoryEtalase", reflect.TypeOf((*MockApplication)(nil).FindProductByTitleCategoryEtalase), arg0, arg1)
}

// FindReviewByDate mocks base method.
func (m *MockApplication) FindReviewByDate(arg0 context.Context, arg1 string, arg2 int64) ([]*product.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReviewByDate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*product.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReviewByDate indicates an expected call of FindReviewByDate.
func (mr *MockApplicationMockRecorder) FindReviewByDate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReviewByDate", reflect.TypeOf((*MockApplication)(nil).FindReviewByDate), arg0, arg1, arg2)
}

// GetAllProduct mocks base method.
func (m *MockApplication) GetAllProduct(arg0 context.Context) ([]*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", arg0)
	ret0, _ := ret[0].([]*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockApplicationMockRecorder) GetAllProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockApplication)(nil).GetAllProduct), arg0)
}

// GetAllReview mocks base method.
func (m *MockApplication) GetAllReview(arg0 context.Context, arg1 int64) ([]*product.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReview", arg0, arg1)
	ret0, _ := ret[0].([]*product.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReview indicates an expected call of GetAllReview.
func (mr *MockApplicationMockRecorder) GetAllReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReview", reflect.TypeOf((*MockApplication)(nil).GetAllReview), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockApplication) UpdateProduct(arg0 context.Context, arg1 int64, arg2 *product.ProductParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockApplicationMockRecorder) UpdateProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockApplication)(nil).UpdateProduct), arg0, arg1, arg2)
}
